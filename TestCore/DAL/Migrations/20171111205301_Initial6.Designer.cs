// <auto-generated />
using DAL;
using DAL.Entity;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace DAL.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20171111205301_Initial6")]
    partial class Initial6
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DAL.Entity.AppointmentEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<int>("DoctorId");

                    b.Property<int>("PatientId");

                    b.Property<int>("ReviewStatuse");

                    b.Property<DateTime>("Time");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("DAL.Entity.DoctorEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Age");

                    b.Property<int?>("CurrentWorkPlaceId");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<string>("Information");

                    b.Property<string>("JobTitle");

                    b.Property<string>("LastName");

                    b.Property<string>("Location");

                    b.Property<string>("Password");

                    b.Property<string>("Procedures");

                    b.HasKey("Id");

                    b.HasIndex("CurrentWorkPlaceId");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("DAL.Entity.EducationEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("DoctorEntityId");

                    b.Property<int>("GraduateYear");

                    b.Property<string>("Place");

                    b.Property<string>("Speciality");

                    b.HasKey("Id");

                    b.HasIndex("DoctorEntityId");

                    b.ToTable("Educations");
                });

            modelBuilder.Entity("DAL.Entity.ExperienceEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<int?>("DoctorEntityId");

                    b.Property<DateTime?>("EndTime");

                    b.Property<string>("Place");

                    b.Property<DateTime>("StartTime");

                    b.HasKey("Id");

                    b.HasIndex("DoctorEntityId");

                    b.ToTable("Experiences");
                });

            modelBuilder.Entity("DAL.Entity.PatientEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Age");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<string>("Password");

                    b.HasKey("Id");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("DAL.Entity.ReviewEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Advantage");

                    b.Property<string>("Comment");

                    b.Property<string>("Disadvantage");

                    b.Property<int>("DoctorId");

                    b.Property<int>("Mark");

                    b.Property<string>("PatientEmail");

                    b.Property<int>("PatientId");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("DAL.Entity.AppointmentEntity", b =>
                {
                    b.HasOne("DAL.Entity.DoctorEntity", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.Entity.PatientEntity", "Patient")
                        .WithMany("Apointments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.Entity.DoctorEntity", b =>
                {
                    b.HasOne("DAL.Entity.ExperienceEntity", "CurrentWorkPlace")
                        .WithMany()
                        .HasForeignKey("CurrentWorkPlaceId");
                });

            modelBuilder.Entity("DAL.Entity.EducationEntity", b =>
                {
                    b.HasOne("DAL.Entity.DoctorEntity")
                        .WithMany("Educations")
                        .HasForeignKey("DoctorEntityId");
                });

            modelBuilder.Entity("DAL.Entity.ExperienceEntity", b =>
                {
                    b.HasOne("DAL.Entity.DoctorEntity")
                        .WithMany("PreviousExperience")
                        .HasForeignKey("DoctorEntityId");
                });

            modelBuilder.Entity("DAL.Entity.ReviewEntity", b =>
                {
                    b.HasOne("DAL.Entity.DoctorEntity", "Doctor")
                        .WithMany("Reviews")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.Entity.PatientEntity", "Patient")
                        .WithMany("Reviews")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
